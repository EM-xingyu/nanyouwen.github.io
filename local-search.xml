<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java对象在内存中的实例化过程</title>
    <link href="/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <url>/java%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/JVM/"/>
    <url>/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机（JVM）简介"><a href="#Java虚拟机（JVM）简介" class="headerlink" title="Java虚拟机（JVM）简介"></a>Java虚拟机（JVM）简介</h1><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java程序能够在各种不同平台上运行的关键。JVM的核心职责是将Java字节码翻译成机器码并执行。本文将深入浅出地介绍JVM的基本架构和工作原理。</p><h2 id="JVM的架构"><a href="#JVM的架构" class="headerlink" title="JVM的架构"></a>JVM的架构</h2><p>JVM主要由以下几个部分组成：</p><h3 id="1-类加载子系统"><a href="#1-类加载子系统" class="headerlink" title="1. 类加载子系统"></a>1. 类加载子系统</h3><p>类加载子系统负责加载Java类文件，将其转换为内存中的类对象。这一过程包括以下几个步骤：</p><ul><li><strong>加载</strong>：查找和加载类的二进制数据。</li><li><strong>连接</strong>：验证、准备和解析类的二进制数据。</li><li><strong>初始化</strong>：初始化类的静态变量和静态代码块。</li></ul><h3 id="2-运行时数据区"><a href="#2-运行时数据区" class="headerlink" title="2. 运行时数据区"></a>2. 运行时数据区</h3><p>运行时数据区是JVM运行Java程序时的内存模型，主要包括：</p><ul><li><strong>堆（Heap）</strong>：存储对象实例和数组，是垃圾回收的主要区域。</li><li><strong>栈（Stack）</strong>：存储方法调用和局部变量，每个线程都有自己的栈。</li><li><strong>方法区（Method Area）</strong>：存储已被JVM加载的类、常量、静态变量等。</li><li><strong>程序计数器（Program Counter Register）</strong>：每个线程都有一个程序计数器，指示下一条将要执行的字节码指令。</li><li><strong>本地方法栈（Native Method Stack）</strong>：为本地方法（如通过JNI调用的C&#x2F;C++代码）服务。</li></ul><h3 id="3-执行引擎"><a href="#3-执行引擎" class="headerlink" title="3. 执行引擎"></a>3. 执行引擎</h3><p>执行引擎是JVM的核心组件，负责执行字节码指令。它包含以下几个部分：</p><ul><li><strong>解释器</strong>：逐条解释执行字节码指令。</li><li><strong>即时编译器（JIT Compiler）</strong>：将字节码编译为机器码，提高执行速度。</li><li><strong>垃圾回收器</strong>：管理堆内存，自动回收不再使用的对象。</li></ul><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><p>垃圾回收（Garbage Collection，简称GC）是JVM的一项重要功能，它自动管理堆内存，回收不再使用的对象。常见的垃圾回收算法包括：</p><ul><li><strong>标记-清除算法（Mark-and-Sweep）</strong>：标记活跃对象，然后清除未标记的对象。</li><li><strong>标记-压缩算法（Mark-and-Compact）</strong>：标记对象后，压缩存活对象到堆的一端，避免碎片化。</li><li><strong>分代收集算法</strong>：将堆分为新生代和老年代，根据对象的存活时间优化回收。</li></ul><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优是提高Java应用性能的重要手段。常见的调优手段包括：</p><ul><li><strong>调整堆大小</strong>：根据应用需求调整初始和最大堆大小。</li><li><strong>选择合适的垃圾回收器</strong>：如G1、CMS等，适合不同应用场景。</li><li><strong>监控和分析</strong>：使用工具（如JVisualVM、JConsole）监控JVM的性能和内存使用情况。</li></ul><p>以上是对JVM的基本介绍。理解JVM的工作原理有助于编写高效的Java程序，并在遇到性能问题时能够迅速定位和解决。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DML</title>
    <link href="/Mysql%E4%B8%AD%E7%9A%84DML/"/>
    <url>/Mysql%E4%B8%AD%E7%9A%84DML/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql中的DDL</title>
    <link href="/Mysql%E4%B8%AD%E7%9A%84DDL/"/>
    <url>/Mysql%E4%B8%AD%E7%9A%84DDL/</url>
    
    <content type="html"><![CDATA[<font color=#999AAA >SQL简介：结构化查询语言（SQL）是一种特殊目的的编程语言,是一种数据库查询和程序设计语言，专用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</font><p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p><h1 id="一、使用DDL定义数据库表结构"><a href="#一、使用DDL定义数据库表结构" class="headerlink" title="一、使用DDL定义数据库表结构"></a>一、使用DDL定义数据库表结构</h1><p>1.<strong>创建数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>语法说明：<br>database_name是数据库名。</p><p>2.<strong>删除数据库</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>3.<strong>查看数据库</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>如下，查询结果为所有MySQL-1连接中的数据库<br><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/1.png" alt="1"></p><p>4.<strong>创建表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>),<br>birth <span class="hljs-type">date</span>,<br>balance <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>)<br></code></pre></td></tr></table></figure><p>示例说明：<br>varchar、date、decimal： 数据类型 （有关数据类型具体可参考第二章内容）<br>(20)：数据长度<br>not null :不为空<br>primary key :主键</p><p>效果如下图：</p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/2.png" alt="2"></p><p><img src="/../img/Mysql%E4%B8%AD%E7%9A%84DDL/3.png" alt="3"></p><h1 id="二、使用DDL维护数据表结构"><a href="#二、使用DDL维护数据表结构" class="headerlink" title="二、使用DDL维护数据表结构"></a>二、使用DDL维护数据表结构</h1><p><strong>修改表结构</strong>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 修改子句;<br></code></pre></td></tr></table></figure><p>1.<strong>新增字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> column_name <br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>2.<strong>变更字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE column_name new_column_name<br>data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：将字段column_name名变更为new_column_name</p><p>3.<strong>更新字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY column_name <br>new_data_type [<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>] [<span class="hljs-keyword">DEFAULT</span> default_value];<br></code></pre></td></tr></table></figure><p>说明：更新字段column_name 的数据类型为new_data_type</p><p>4.<strong>删除字段子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> column_name ;<br></code></pre></td></tr></table></figure><p>说明：删除字段column_name</p><p>5.<strong>删除唯一约束子句</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">UNIQUE</span> constraint_name ;<br></code></pre></td></tr></table></figure><p>说明：constraint_name为唯一约束字段名</p><p>6.<strong>重命名表</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">TO</span> new_table_name;<br></code></pre></td></tr></table></figure><p>说明：将表table_name 更新为new_table_name</p><p>7.<strong>添加外键约束</strong>示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name(<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> KEY(fk_name)<br><span class="hljs-keyword">REFERENCES</span> referenced_table_name(ref_pk_name)<br>);<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>constraint_name :约束名。</li><li>fk_name：当前表中外键名。</li><li>referenced_table_name：被引用表名（主表名）。</li><li>ref_pk_name：被引用表主键。</li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
